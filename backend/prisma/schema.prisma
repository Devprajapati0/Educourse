generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  username String 
  description String?
  photo String @default("https://www.google.co.in/imgres?q=avatar%20for%20progile&imgurl=https%3A%2F%2Fstatic.vecteezy.com%2Fsystem%2Fresources%2Fpreviews%2F014%2F212%2F681%2Foriginal%2Ffemale-user-profile-avatar-is-a-woman-a-character-for-a-screen-saver-with-emotions-for-website-and-mobile-app-design-illustration-on-a-white-isolated-background-vector.jpg&imgrefurl=https%3A%2F%2Fwww.vecteezy.com%2Fvector-art%2F14212681-female-user-profile-avatar-is-a-woman-a-character-for-a-screen-saver-with-emotions-for-website-and-mobile-app-design-vector-illustration-on-a-white-isolated-background&docid=PLuN01VZotFH4M&tbnid=lsrv_IqhsJhCDM&vet=12ahUKEwjGxuPEu_yIAxWnVWwGHTHmGJ4QM3oECH0QAA..i&w=1920&h=1920&hcb=2&ved=2ahUKEwjGxuPEu_yIAxWnVWwGHTHmGJ4QM3oECH0QAA")
  password String 
  role roleType @default(student)
  refreshtoken String
  accesstoken String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(true)
  enrollments  Enrollment[]  // Stores courses the user is enrolled in
  courses      Course[]      // Courses created by the user if they're an instructor
  reviews      Review[]      // Reviews made by the user
}

model Enrollment {
  id Int @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  course Course @relation(fields: [course_id], references: [id])
  course_id Int
  progress Int @default(0)
  completed Boolean @default(false)
  enrolledAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Course {
  id Int @id @default(autoincrement())
  title String 
  description String?
  thumbnail String
  owner User @relation(fields: [owner_id], references: [id])
  owner_id Int
  category Category @relation(fields: [category_id], references: [id])
  category_id Int
  lessons Lesson[]
  trialvideo String?
  pricing PriceCourse?
  level courseLevel
  studentsEnrolled Int @default(0)
  reviews Review[]
  enroll Enrollment[] // Stores enrollments for this course
  createdAt DateTime @default(now())

}


model otp{
   email String @unique
   otp String @unique
   otpexpiry DateTime @default(now())
   createdAt DateTime @default(now())
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id Int @id @default(autoincrement())
  title String @unique
  description String?
  attachment String?
  video String?
  objectives String
  course Course @relation(fields: [course_id], references: [id])
  course_id Int
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model PriceCourse {
  id Int @id @default(autoincrement())
  type typeofCourse @default(free)
  amount Int @default(0)

  course Course @relation(fields: [course_id], references: [id])
  course_id Int @unique

  
}

model Review{
  id Int @id @default(autoincrement())
  course Course @relation(fields: [course_id], references: [id])
  course_id Int @unique
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  rating Int 
  comment String?
}

enum courseLevel {
  beginner
  intermediate
  advanced
}

enum typeofCourse {
  free
  paid
}

enum roleType {
  student
  instructor
}